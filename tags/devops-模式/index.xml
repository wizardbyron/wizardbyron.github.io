<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps 模式 on 顾宇的研习笔记</title>
    <link>https://www.guyu.me/tags/devops-%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in DevOps 模式 on 顾宇的研习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 13 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.guyu.me/tags/devops-%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DevOps 模式 - 引入 DevOps 顾问</title>
      <link>https://www.guyu.me/2019/2019-07-13-devops-pattern-introduce-devops-consultant/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.guyu.me/2019/2019-07-13-devops-pattern-introduce-devops-consultant/</guid>
      <description>很多企业并不是 DevOps 运动的早期玩家。当开始注意到 DevOps 的时候，想快速达到 DevOps 实践领先企业的效果，会引入有经验的 DevOps 顾问进行快速的转型。
然而，短期的 DevOps 顾问合同如果不能帮助团队构建 DevOps 制度和 DevOps 文化，DevOps 转型的效果将随 DevOps 专家的离开而离开，使团队得到“DevOps 不适用”的错觉。因此，在引入 DevOps 专家顾问的时候，我们一定要明确 请 DevOps 顾问的目的以及 DevOps 顾问留下的东西。
模式：引入 DevOps 顾问 (Introduce DevOps Consultant) 模式名称：引入 DevOps 顾问 (Introduce DevOps Consultant)
模式别名：引入 DevOps 专家，引入 DevOps 教练
模式类别： 策略模式
风险： 中 - 采用的时候要注意场景和条件，否则会出现反模式。
价值：中 - 采用该模式产生中期固定的收益，但要持续做才可以获得收益。
见效时间：快 - 2 周内可看到显著改进。
说明：
 引入 DevOps 顾问需要注意以下几点：  DevOps 顾问要对 DevOps 的历史和来龙去脉有起码的理解。 DevOps 顾问要有不同的转型案例，如果只有一类企业的 DevOps 转型案例，在转型的过程中很容易进入“路径依赖”，认为 DevOps 转型只有一种。所以，DevOps 顾问要问不同案例中的差异的区别。 DevOps 顾问要同时引入管理转型实践和技术实践。缺乏 DevOps 管理实践会导致 DevOps 转型失去方向和效果。缺乏 DevOps 技术实践会让 DevOps 难以落地。 把你的具体问题抛给 DevOps 顾问，让他提出问题和观点。 关注 DevOps 顾问在上述各种描述中对 CLAMS 原则的应用。  DevOps 顾问需要可以和团队“一起做”，而不是“在一边看”。 DevOps 顾问要能给出对于组织的 DevOps 评估，并且根据评估给出能够落地的解决方案。 DevOps 顾问要根据 DevOps 评估的内容，帮助组织构建出 DevOps 文化、技术实践，以及相应的制度。 警惕那些对组织特征、组织痛点和转型范围不提问题的 DevOps 顾问。  相关模式：DevOps 评估，DevOps 转型，DevOps 改进</description>
    </item>
    
    <item>
      <title>DevOps 模式 - 索引</title>
      <link>https://www.guyu.me/2019/2019-06-03-devops-patterns-index/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.guyu.me/2019/2019-06-03-devops-patterns-index/</guid>
      <description>我今天把 DevOps 模式和反模式做了一个简单的总结。如果全职写，半年可以写完。如果周更，需要两年，我怕自己烂尾，夜长梦多。
自己开的坑，含着泪也要把它填完。
DevOps 策略模式  模式：定义你的 DevOps 反模式：DevOps 教条主义 反模式：DevOps 复制者 模式：引入 DevOps 顾问 反模式：DevOps 专家依赖 模式：DevOps 评估 模式：DevOps 共识 反模式：片面的 DevOps 理解 模式：定义 DevOps 范围 模式：DevOps 三步工作法 模式：DevOps 团队复制 模式：DevOps 团队改进 模式：DevOps 规范 反模式：缺乏管理约束的 DevOps 规范 反模式：缺乏技术约束的 DevOps 规范 模式：测试计划驱动开发计划 案例-01：每个人自己的 DevOps 案例-02：不同范围下的 DevOps 策略 案例-03：DevOps 团队复制 vs DevOps 团队改进  DevOps 组织模式  模式：DevOps 试点团队 模式：DevOps 推广团队 模式：Dev 团队含 Ops 成员 模式：Dev 团队共享 Ops 团队 模式：BAU 团队和特性团队 反模式：职责过多的 DevOps 团队 反模式：全栈工程师 模式：独立的质量控制团队 反模式：屈服于交付压力的质量控制团队 案例-01：屈服于交付压力的质量控制团队  DevOps 管理模式  模式：最小可用流程 模式：DevOps 看板 模式：累计流图 模式：四类任务 模式：DevOps 关键指标 模式：定制化 DevOps 度量 反模式：没有度量的DevOps 模式：包含 Ops 的 Scrum 模式：质量内建 模式：质量保证和质量控制 反模式：过程质量 Over 结果质量 模式：DevOps 技能矩阵 模式：测试人员驱动开发人员 案例-01：结合质量控制的质量保证流程 案例-02：交付 QA 和流程 QA  DevOps 文化模式  模式：DevOps 比学赶超 模式：CLAMS 反思 模式：DevOps 回顾会议 模式：DevOps 大使 模式：反向管理 反模式：DevOps 指挥官 模式：我要做 DevOps 反模式：要我做 DevOps 模式：全员为质量负责 模式：DevOps 培训 反模式：DevOps 速成班 模式：DevOps 分享 反模式：封闭的 DevOps 模式：&amp;rdquo;如何定义&amp;rdquo;和&amp;rdquo;如何度量&amp;rdquo;问题 案例-01：规模化 DevOps 案例-02：正向管理 vs 反向管理 案例-03：通过分享增强自己的 DevOps 能力  DevOps 技术模式  模式：持续集成 反模式：持续集成表演 模式：持续部署 模式：基础设施即代码 模式：基础设施流水线 模式：自动化安全扫描 模式：测试驱动开发 反模式：过度自动化的 DevOps 模式：DevOps 平台 反模式：工具化 DevOps 反模式：基于组织映射的 DevOps 平台 模式：DesignOps 模式：混沌工程 模式：环境无关的应用程序 模式：环境相关的应用程序 模式：自部署的应用程序 反模式：知识太多的应用程序 反模式：基础设施依赖的应用程序 模式：12 Factors App 模式：BeyondCorp 模式：3R 企业安全 模式：微服务架构 反模式：微服务嫉妒 反模式：缺乏 DevOps 能力的微服务组织 模式：度量驱动的微服务 反模式：缺乏度量的微服务 模式：Serverless 应用架构 反模式：纳服务架构 案例-01：基于 Serverless 的微服务架构 案例-02：数据库变更流水线  关于 DevOps 模式 DevOps 模式的索引在 Github 上开源，地址是https://github.</description>
    </item>
    
    <item>
      <title>DevOps 模式 - 定义你的DevOps</title>
      <link>https://www.guyu.me/2019/2019-05-26-devops-pattern-define-your-devops/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.guyu.me/2019/2019-05-26-devops-pattern-define-your-devops/</guid>
      <description>遗憾的是，很少有人真的关心 “DevOps 是什么”，当然其实也不重要。比 DevOps 是什么来说，更重要的是 “DevOps 能做什么”。据 John Willis 的说法，DevOps 运动的发起人 Patrick Debois 一直拒绝给 DevOps 下定义是一件了不起的事情。 Patrick Debois 他不希望把 DevOps 据为己有。DevOps 应该属于社区，属于每一个愿意投身于 DevOps 目标的个人和组织。
由于第一届 DevOpsDays 奠定 DevOps 的基础。组织者 Patrick Debois 作为第一个&amp;rdquo;官方&amp;rdquo; DevOps 发言人。第一届 DevOps 的产出内容给未来的 DevOps 发展方向上起到决定性作用。因此，DevOps 模式中的 DevOps 的相关定义均参考Patrick Debios 的博客。
然而，在我过去经历的不同的 DevOps 转型/改进项目中的经历来看。不同的组织，不同的部门，甚至是同一个部门的人，大家对 DevOps 的理解并不一致。这对 DevOps 长时间在组织内发挥改进作用是不利的。
模式：定义你的 DevOps (Define Your DevOps) 模式名称：定义你的 DevOps (Define Your DevOps)
模式别名：定制化 DevOps 定义 (Customize DevOps Definition)
模式类别： 策略模式
风险： 中 - 采用的时候要注意场景和条件，否则会出现反模式。</description>
    </item>
    
    <item>
      <title>DevOps 模式 - 采用模式语言讨论 DevOps</title>
      <link>https://www.guyu.me/2019/2019-05-18-about-devops-patterns/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.guyu.me/2019/2019-05-18-about-devops-patterns/</guid>
      <description>2018年的5月，DevOps 实践手册作者&amp;rdquo;四人帮&amp;rdquo;之一的 John Willis 来到了北京，在 DevOps 国际峰会上做了一场名为&amp;rdquo;DevOps：Almost 10 Years - What A Strange Long Trip It&amp;rsquo;s Been&amp;ldquo;的演讲。除了这个演讲的 PPT 只有一张很长的图片以外，坐在台下的我对他在这篇演讲中 DevOps 的定义有了共鸣。在这次演讲中，他将 DevOps 定义如下：
翻译过来就是&amp;rdquo;DevOps 是一组实践和模式，用来将人力资本转化为高效能的组织资本&amp;rdquo; 。
关于这段定义，我深以为然。
然而，在不同的场合和其他人交流时，我对 DevOps 的实践产生了忧虑。一方面，我看到很多朋友在落地某些 DevOps 实践中，由于缺乏经验，出现了种种阻碍 DevOps 产生效益的问题。另一方面，尽管论述如何做 DevOps 的材料足够多。但几乎都是告诉我们&amp;rdquo;成功的 DevOps”是什么样的，而“出现了问题怎么办”的内容却乏善可陈。
我发现很多问题在不同组织的 DevOps 转型中反复遇到，而解决这些问题的方式和碰到的问题也大同小异。因此，我开始把这些常见有效的做法和常见的错误做法总结下来，并采用模式的语言对其进行分类整理和描述，形成了 &amp;ldquo;DevOps 模式&amp;rdquo;。
下面，我将这套 DevOps 模式语言的基本格式介绍给你。
DevOps 模式类别 DevOps 的模式分为以下五类：
 策略模式：在设计长期的 DevOps 改进中的方向。 组织模式：在不同类型、不同规模的组织下的团队分工合作方式。 管理模式：提升组织表现的日常工作的流程、活动和制度。 技术模式：服务于管理模式的工具及其实践。 文化模式：用于提升团队 DevOps 文化的一些活动和方法。  DevOps 模式的格式 DevOps 模式的将采用下述格式描述：
模式名称：用来描述模式的正式名称，这个名称描述了该模式的特征。
模式别名：其它方便记忆的其它名称，别名一般包含了某种助记隐喻。
模式类别： 策略模式、组织模式、管理模式、技术模式和文化模式的其中一种。
风险： 采用该模式可能会带来的风险。风险包括以下三种：</description>
    </item>
    
  </channel>
</rss>